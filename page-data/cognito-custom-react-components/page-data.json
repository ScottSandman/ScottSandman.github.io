{"componentChunkName":"component---src-templates-blog-template-js","path":"/cognito-custom-react-components","result":{"data":{"markdownRemark":{"frontmatter":{"author":"Scott Sandman","date":"2020-06-24","title":"AWS Cognito Custom React Components","path":"/cognito-custom-react-components"},"html":"<p>It's been a little while since I have posted. Apologies for that. The last month has been a blur with developing our final group and personal projects for JRS Code School. Concurrently, I have also been developing a mobile app for a social media start-up and a web application framework with a headless content management system for the Krause Center for Leadership and Ethics at The Citadel.</p>\n<p>My final solo project went well. I deployed a web app using AWS Amplify Console which built the React client side through a connection with the GitHub repo. The server side was built using Node.js, Express.js and REST API's connected to a MongoDB Atlas database. I then implemented the serverless framework to deploy it to an AWS Lambda. Pretty cool, right? You can check out the project <a href=\"https://master.d302zpp58vbn99.amplifyapp.com/\">here</a></p>\n<p>Anyway, this is leading to today's topic. While developing the final project, I was using AWS Amplify CLI and had set up authentication and authorization using Cognito: <code>amplify add auth</code>. For the sake of brevity, we are going to start at this point. If you need help getting to this juncture, please check out this <a href=\"https://docs.amplify.aws/start/q/integration/react\">tutorial</a>.</p>\n<p>The fastest way to get Cognito up and running is to utilize the withAuthenticator wrapper and pass it your root level component thusly:</p>\n<pre><code class=\"language-Javascript\">import React from \"react\";\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\n\nconst App = () => {\n    return (\n        &#x3C;h1>Awesome Content Here&#x3C;/h1>\n    )\n}\n\nexport default withAuthenticator(App)\n</code></pre>\n<p>And, just like that, we have our auth. So, we are finally at today's topic. Having used withAuthenticator on a couple of projects, I continued to run into an issue with having to hard refresh to get state certain state updates. I spent a number of hours researching for a solution and implemented multiple changes to the code. The issue occured using redux. I added an AppContainer and wrapped withAuthenticator around it. Still occured. Tried implementing React Hooks useState and useEffect in lieu of redux. Yup, didn't work. I then moved from the withAuthenticator to the AmplifyAuthenticator component similar to the following:</p>\n<pre><code class=\"language-JavaScript\">import React from \"react\";\nimport { AmplifyAuthenticator } from \"@aws-amplify/ui-react\";\n\nconst App = () => {\n    return (\n        &#x3C;AmplifyAuthenticator>\n            &#x3C;h1>Router and Components&#x3C;/h1>\n        &#x3C;/AmplifyAuthenticator>\n    )\n}\n\nexport default App\n</code></pre>\n<p>Same result. Next step. Custom Cognito components. Importing Amplify Auth gives us access to over 30 methods that can be used to generate a custom auth flow. It's not difficult to follow the <a href=\"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html\">docs</a> and implement these methods, but it is time consuming. Make certain, if you elect to go this route, to make components that can be easily re-used. And, yes, it worked. The application renders and re-renders based on state instantly started working as expected.</p>\n<p>Below is an example of a custom SignIn component:</p>\n<pre><code class=\"language-JavaScript\">import React, { useState } from \"react\";\nimport { Auth } from \"aws-amplify\";\n\nconst SignIn = ({ setLoggedIn }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const attemptSignIn = async () => {\n    try {\n      await Auth.signIn(username, password); //one of 30+ methods for custom auth flow\n      setPassword(\"\"); // reset password to empty string after submission\n      setLoggedIn(true); //setLoggedIn passed down from root component\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleName = (e) => {\n    setUsername(e.target.value);\n  };\n\n  const handlePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  return (\n    &#x3C;Container component=\"main\" maxWidth=\"xs\">\n        input elements here...\n    &#x3C;/Container>\n  );\n};\n\nexport default SignIn;\n</code></pre>\n<p>SignOut is just a simple:</p>\n<pre><code class=\"language-JavaScript\">Auth.signOut();\n</code></pre>\n<p>Throw in signUp, confirmSignUp, forgotPassword and you are well on your way to a fully customized auth flow using Cognito. Hope you learned something. Until next time, stay safe and healthy.</p>"},"site":{"siteMetadata":{"image":"/src/images/ravenel.jpg","siteUrl":"https://scottsandman.github.io"}}},"pageContext":{}}}