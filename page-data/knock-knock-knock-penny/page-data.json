{"componentChunkName":"component---src-templates-blog-template-js","path":"/knock-knock-knock-penny","result":{"data":{"markdownRemark":{"frontmatter":{"author":"Scott Sandman","date":"2020-04-17","title":"Knock, Knock, Knock, Penny","path":"/knock-knock-knock-penny"},"html":"<p><img src=\"./knock-knock-knock-penny.jpg\" alt=\"Image of Knock, knock, knock, Penny\" title=\"We&#x27;ve all been there\"></p>\n<p>We've all been there. That place where ever word and sound sends us further down the rabbit hole. Most certainly we will be there again. Hopefully what I'm about to share with you will help limit how bad \"there\" gets.</p>\n<p>Originally, I was going to call this posting \"Tap, Tap, Tap\" (you'll see why later), but as I was musing, \"knock, knock, knock, Penny\" kept coming to mind. The entire series of them. Then I found the image and here we are.</p>\n<p>Recently our class at JRS Code School took a dive into Functional Programming (FP). Im not going to get to deep into defining FP. For those of you not familiar with FP and would like to learn more I recommend bookmarking this post or adding to it your RSS feed and heading over to <a href=\"https://fpjs.now.sh/docs/contents\">Functional Javascript</a>.</p>\n<p>If you've made it this far, then there is a strong possibility that you have at some point struggled with a curried function. I struggled mightily with a few until being introduced to this tiny little tap function. Let's take a look at a curried function and then I'll show you how tap works. The following curried function uses Ramda functions compose, reduce, sort and map to return an array of a deck of playing cards in face value order. The compose function reads the other functions from right-to-left (if you prefer legt-to-right you can use pipe) so the deck of cards array is passed into the map function which creates a new array of the card objects key \"code\", which is then passed to sort to (obviously) sort it and finally it is passed to reduce where a new array of the card objects is returned in sorted order.</p>\n<p><img src=\"./curried-function.jpg\" alt=\"Image of curried function\"></p>\n<p>The above function currently works, but at one time it did not. How did I debug it? By using a function called tap. Let's take a look at it.</p>\n<p><img src=\"./tap-function.jpg\" alt=\"Image of tap function\"></p>\n<p>See the three taps? That's why the draft title of this post was Tap, Tap, Tap. But, you can call it whatever you like. Tap just seems a fitting name as it taps into the sequence of curried functions and gets called in the sequence along with the other functions. Here's a look at it put into action.</p>\n<p><img src=\"./curried-function-with-tap.jpg\" alt=\"Image of curried function with tap function inserted\"></p>\n<p>What does it do? Well, it simply accepts the return value of the previous function as a parameter, logs that parameter to the console and then returns that value to the next function allowing you to see the output at each step of the curried function. Pretty simple, right? It's been very helpful to me in understanding how a curried function works and how to alter my code accordingly to get the desired outputs.</p>\n<p>I hope you can find use for this little tidbit. I know I have and in the process have limited the number of times I have had to look like dear, sweet Penny up above.</p>"}},"pageContext":{}}}